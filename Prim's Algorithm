#include <algorithm>
#include <iostream>
#include <vector>
using namespace std;

#define V 5
int minnode(vector<bool>&visited, vector<int>&dist){
    int min=1000000,vertex=0;
    for(int i=0;i<V;i++)
    if(!visited[i] && dist[i]!=1000000 && dist[i]<min){
        min=dist[i];
        vertex=i;
    }
    return vertex;
}
void prim(int graph[V][V]){
    vector<int>dist(V,1000000);
    dist[0]=0;
    int parent[V];
    parent[0]=-1;
    vector<bool>visited(V,false);
    for(int i=0;i<V-1;i++){
        
        int node=minnode(visited,dist);
    
        visited[node]=true;
        for(int j=0;j<V;j++){
            
        
        if(graph[node][j]!=0 && !visited[j] && dist[j]>graph[node][j])
        {
            
            dist[j]=graph[node][j];
            parent[j]=node;
        }
        
        } 
    }
    
    for(int i=0;i<V;i++)
    cout<<parent[i]<<" "<<i<<" "<<dist[i]<<endl;
}
int main() {
   int graph[V][V] = { { 0, 2, 0, 6, 0 }, 
                        { 2, 0, 3, 8, 5 }, 
                        { 0, 3, 0, 0, 7 }, 
                        { 6, 8, 0, 0, 9 }, 
                        { 0, 5, 7, 9, 0 } };
    prim(graph);
  return 0;
}
