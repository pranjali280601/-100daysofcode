/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* cloneGraph(Node* node) {
       if(!node)
           return node;
        unordered_map<int,Node*>visited;
        return dfs(node,visited);
    }
    Node* dfs(Node *node,unordered_map<int,Node*>&visited){
        Node* newNode=new Node(node->val);
        visited[newNode->val]=newNode;
            for(auto i:node->neighbors){
                if(!visited[i->val]){
                   newNode->neighbors.push_back(dfs(i,visited));
                }
                else
                     newNode->neighbors.push_back(visited[i->val]);
            }
        return newNode;
    }
};
