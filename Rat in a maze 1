// { Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
// User function template for C++

class Solution{
    public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<vector<bool>>visited(n,vector<bool>(n,false));
        string path;
        vector<string>ans;
        dfs(m,n,visited,path,ans,0,0);
        sort(ans.begin(),ans.end());
        return ans;
    }
    bool issafe(int r,int c,vector<vector<bool>>&visited,vector<vector<int>> &m,int n){
        if(r<0 || c<0 || c>=n || r>=n || visited[r][c] || m[r][c]==0)
        return false;
        return true;
    }
    void dfs(vector<vector<int>> &m, int n,vector<vector<bool>>&visited, string &path, vector<string>&ans,int r,int c){
        if(!issafe(r,c,visited,m,n))
        return;
        if(r==n-1 && c==n-1){
            ans.push_back(path);
        
            return;
        }
        visited[r][c]=true;
        if(issafe(r+1,c,visited,m,n)){
            path.push_back('D');
            dfs(m,n,visited,path,ans,r+1,c);
            path.pop_back();
        }
        if(issafe(r-1,c,visited,m,n)){
            path.push_back('U');
            dfs(m,n,visited,path,ans,r-1,c);
            path.pop_back();
        }
        if(issafe(r,c+1,visited,m,n)){
            path.push_back('R');
            dfs(m,n,visited,path,ans,r,c+1);
            path.pop_back();
        }
        if(issafe(r,c-1,visited,m,n)){
            path.push_back('L');
            dfs(m,n,visited,path,ans,r,c-1);
            path.pop_back();
        }
        visited[r][c]=false;
    }
    
};

    


// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int> (n,0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m, n);
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}  // } Driver Code Ends
