int Solution::maxArr(vector<int> &A) {
   
    int n=A.size();
    int maxip=INT_MIN,maxim=INT_MIN,minip=INT_MAX,minim=INT_MAX;
    for(int i=0;i<A.size();i++){
        maxip=max(maxip,A[i]+i);
        maxim=max(maxim,A[i]-i);
        minip=min(minip,A[i]+i);
        minim=min(minim,A[i]-i);
    }
    return max(maxip-minip,maxim-minim);
   
}

f(i, j) = |A[i] - A[j]| + |i - j| can be written in 4 ways (Since we are looking at max value, we donâ€™t even care if the value becomes negative as long as we are also covering the max value in some way).

(A[i] + i) - (A[j] + j)
-(A[i] - i) + (A[j] - j) 
(A[i] - i) - (A[j] - j) 
(-A[i] - i) + (A[j] + j) = -(A[i] + i) + (A[j] + j)
Note that case 1 and 4 are equivalent and so are case 2 and 3.

We can construct two arrays with values: A[i] + i and A[i] - i. Then, for above 2 cases, we find the maximum value possible. For that, we just have to store minimum and maximum values of expressions A[i] + i and A[i] - i for all i.
