#include <iostream>
#include<bits/stdc++.h>
using namespace std;

vector<vector<int>>direction={{-1,0},{1,0},{0,-1},{0,1}};
int maximumTime(vector<vector<int> > arr){
    int n=arr.size();
    int m=arr[0].size();
    
    vector<vector<int>>temp(n,vector<int>(m,-1));
    queue<pair<pair<int,int>,int>>q ;
    
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(arr[i][j]==2){
                temp[i][j]=0;
                q.push({{i,j},0});
            }
        }
    }
    
    while(!q.empty()){
        pair<pair<int,int>,int>cur=q.front();
        q.pop();
       
        for(int i=0;i<4;i++){
            int row=cur.first.first+direction[i][0];
            int col=cur.first.second+direction[i][1];
            
            if(row<0 || row>=n || col<0 || col>=m || arr[row][col]!=1 || temp[row][col]!=-1 )
            continue;
            
            temp[row][col]=cur.second+1;
            q.push({{row,col},cur.second+1});
              
        }
   
    }
    int maxe=-1,flag=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
              
                if(arr[i][j]==1 && temp[i][j]==-1)
                {
                    flag=1;
                    break;
                }
                maxe=max(maxe,temp[i][j]);
            }
        }
        
        if(flag==1)
        return -1;
        return maxe;
}

int main()
{
    vector<vector<int> > arr
        = { { 2, 1, 0, 2, 1 },
            { 1, 0, 1, 2, 1 },
            { 1, 0, 0, 2, 1 } };
    cout << maximumTime(arr);
  
    return 0;
}
